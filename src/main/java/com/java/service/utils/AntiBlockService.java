package com.java.service.utils;

import com.java.config.AntiBlockConfig;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class AntiBlockService {
    
    private final AntiBlockConfig antiBlockConfig;
    private final List<AntiBlockStrategy> strategies;
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
     */
    @jakarta.annotation.PostConstruct
    public void init() {
        log.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AntiBlockService");
        log.info("üìã –í—Å–µ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {}", strategies.size());
        
        for (int i = 0; i < strategies.size(); i++) {
            AntiBlockStrategy strategy = strategies.get(i);
            try {
                boolean available = strategy.isAvailable();
                log.info("{}. {} - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {}, –¥–æ—Å—Ç—É–ø–Ω–∞: {}", 
                        i + 1, strategy.getStrategyName(), strategy.getPriority(), available);
            } catch (Exception e) {
                log.warn("{}. {} - –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {}", 
                        i + 1, strategy.getStrategyName(), e.getMessage());
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ URL —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö
     */
    public RedirectCollectorService.RedirectResult processUrlWithFallback(String originalUrl, int maxRedirects, int timeoutSeconds) {
        return processUrlWithFallback(originalUrl, maxRedirects, timeoutSeconds, 0, 0);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ URL —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     */
    public RedirectCollectorService.RedirectResult processUrlWithFallback(String originalUrl, int maxRedirects, int timeoutSeconds, int current, int total) {
        String progressInfo = total > 0 ? String.format(" [%d/%d - %.1f%%]", current + 1, total, ((current + 1) * 100.0) / total) : "";
        
        if (antiBlockConfig.isLogStrategies()) {
            log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL{}: {} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", progressInfo, originalUrl, strategies.size());
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        List<AntiBlockStrategy> sortedStrategies = new ArrayList<>();
        for (AntiBlockStrategy strategy : strategies) {
            try {
                if (strategy.isAvailable()) {
                    sortedStrategies.add(strategy);
                }
            } catch (Exception e) {
                log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {}: {}", 
                        strategy.getClass().getSimpleName(), e.getMessage());
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sortedStrategies.sort((s1, s2) -> Integer.compare(s1.getPriority(), s2.getPriority()));
        
        if (sortedStrategies.isEmpty()) {
            log.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {}", originalUrl);
            return createErrorResult(originalUrl, "NO_STRATEGIES");
        }
        
        RedirectCollectorService.RedirectResult lastResult = null;
        
        for (AntiBlockStrategy strategy : sortedStrategies) {
            long startTime = System.currentTimeMillis();
            
            try {
                if (antiBlockConfig.isLogStrategies()) {
                    log.info("üîß {}| –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {}", progressInfo.isEmpty() ? originalUrl : progressInfo + " " + originalUrl, strategy.getStrategyName());
                }
                
                RedirectCollectorService.RedirectResult result = strategy.processUrl(originalUrl, maxRedirects, timeoutSeconds);
                long elapsedTime = System.currentTimeMillis() - startTime;
                
                if (isSuccessfulResult(result)) {
                    if (antiBlockConfig.isLogStrategies()) {
                        log.info("‚úÖ {}| Strategy: {} | Status: SUCCESS | Time: {}ms | Final: {} | Redirects: {}", 
                                progressInfo.isEmpty() ? originalUrl : progressInfo + " " + originalUrl, 
                                strategy.getStrategyName(), elapsedTime, 
                                result.getFinalUrl(), result.getRedirectCount());
                    }
                    return result;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                if (isBlockedResult(result)) {
                    if (antiBlockConfig.isLogStrategies()) {
                        log.warn("üö´ {}| Strategy: {} | Status: BLOCKED_{} | Time: {}ms | Fallback –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", 
                                progressInfo.isEmpty() ? originalUrl : progressInfo + " " + originalUrl, 
                                strategy.getStrategyName(), result.getStatus(), elapsedTime);
                    }
                    lastResult = result;
                    continue;
                }
                
                // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                if (antiBlockConfig.isLogStrategies()) {
                    log.warn("‚ö†Ô∏è {}| Strategy: {} | Status: {} | Time: {}ms | –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", 
                            progressInfo.isEmpty() ? originalUrl : progressInfo + " " + originalUrl,
                            strategy.getStrategyName(), result.getStatus(), elapsedTime);
                }
                lastResult = result;
                
            } catch (Exception e) {
                long elapsedTime = System.currentTimeMillis() - startTime;
                log.error("URL: {} | Strategy: {} | Exception: {} | Time: {}ms", 
                        originalUrl, strategy.getStrategyName(), e.getMessage(), elapsedTime);
                
                if (lastResult == null) {
                    lastResult = createErrorResult(originalUrl, "STRATEGY_ERROR");
                }
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            try {
                TimeUnit.MILLISECONDS.sleep(200);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                break;
            }
        }
        
        // –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        log.error("‚ùå {}| –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å | Final status: {}", 
                progressInfo.isEmpty() ? originalUrl : progressInfo + " " + originalUrl, 
                lastResult != null ? lastResult.getStatus() : "UNAVAILABLE");
        
        return lastResult != null ? lastResult : createErrorResult(originalUrl, "ALL_STRATEGIES_FAILED");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     */
    private boolean isSuccessfulResult(RedirectCollectorService.RedirectResult result) {
        if (result == null) return false;
        
        String status = result.getStatus();
        return "SUCCESS".equals(status) || 
               "HTTP_200".equals(status) ||
               (status != null && status.startsWith("HTTP_2"));
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
     */
    private boolean isBlockedResult(RedirectCollectorService.RedirectResult result) {
        if (result == null) return false;
        
        String status = result.getStatus();
        return "HTTP_403".equals(status) || 
               "HTTP_401".equals(status) ||
               "HTTP_429".equals(status) ||
               "BLOCKED".equals(status) ||
               "TIMEOUT".equals(status);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
     */
    private RedirectCollectorService.RedirectResult createErrorResult(String originalUrl, String status) {
        RedirectCollectorService.RedirectResult result = new RedirectCollectorService.RedirectResult();
        result.setOriginalUrl(originalUrl);
        result.setFinalUrl(originalUrl);
        result.setStatus(status);
        result.setRedirectCount(0);
        return result;
    }
}