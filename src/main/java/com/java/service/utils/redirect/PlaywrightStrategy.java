package com.java.service.utils.redirect;

import com.java.model.utils.PageStatus;
import com.java.model.utils.RedirectResult;
import com.microsoft.playwright.*;
import com.microsoft.playwright.options.LoadState;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ Playwright
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏–±–æ—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∫–æ–≥–¥–∞ CurlStrategy –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
 */
@Component
@Slf4j
public class PlaywrightStrategy implements RedirectStrategy {
    
    private final UrlSecurityValidator urlSecurityValidator;
    
    public PlaywrightStrategy(UrlSecurityValidator urlSecurityValidator) {
        this.urlSecurityValidator = urlSecurityValidator;
    }
    
    private static final Set<String> BLOCK_KEYWORDS = Set.of(
        "captcha", "recaptcha", "cloudflare", "access denied", 
        "–¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "security check", "bot detection", "too many requests",
        "rate limit", "temporarily unavailable"
    );
    
    private static final String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36";
    
    @Override
    public RedirectResult followRedirects(String url, int maxRedirects, int timeoutMs) {
        long startTime = System.currentTimeMillis();
        String originalUrl = url;
        
        log.debug("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É URL: {} —Å –ø–æ–º–æ—â—å—é PlaywrightStrategy", url);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è URL –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (SSRF –∑–∞—â–∏—Ç–∞)
        try {
            urlSecurityValidator.validateUrl(url);
        } catch (SecurityException e) {
            log.warn("URL –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {} - {}", url, e.getMessage());
            return buildErrorResult(originalUrl, startTime, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: " + e.getMessage());
        }
        
        try (Playwright playwright = Playwright.create()) {
            Browser browser = playwright.chromium().launch(
                new BrowserType.LaunchOptions().setHeadless(true)
            );
            
            BrowserContext context = browser.newContext(new Browser.NewContextOptions()
                .setUserAgent(USER_AGENT)
                .setViewportSize(1920, 1080));
                
            Page page = context.newPage();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            page.setDefaultTimeout(timeoutMs);
            page.setDefaultNavigationTimeout(timeoutMs);

            log.debug("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã: default={}, navigation={}", timeoutMs, timeoutMs);
            
            // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
            int redirectCount = 0;
            String initialUrl = url;
            String finalUrl = url;
            AtomicReference<Integer> initialRedirectCode = new AtomicReference<>(); // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ HTTP –∫–æ–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞

            // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
            page.onResponse(response -> {
                int statusCode = response.status();
                String responseUrl = response.url();
                log.debug("Response: {} -> HTTP {}", responseUrl, statusCode);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
                if ((statusCode >= 300 && statusCode < 400) && initialRedirectCode.get() == null) {
                    initialRedirectCode.set(statusCode);
                    log.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: {}", statusCode);
                }
            });
            
            try {
                log.debug("Playwright: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ URL: {} —Å —Ç–∞–π–º–∞—É—Ç–æ–º {}–º—Å", url, timeoutMs);
                Response response = page.navigate(url, new Page.NavigateOptions().setTimeout(timeoutMs));
                
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö JavaScript-—Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
                try {
                    page.waitForLoadState(LoadState.NETWORKIDLE, new Page.WaitForLoadStateOptions().setTimeout(timeoutMs));
                } catch (Exception e) {
                    log.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è NETWORKIDLE, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º: {}", e.getMessage());
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–∂–¥–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    try {
                        page.waitForLoadState(LoadState.DOMCONTENTLOADED, new Page.WaitForLoadStateOptions().setTimeout(timeoutMs / 2));
                    } catch (Exception ex) {
                        log.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è DOMCONTENTLOADED: {}", ex.getMessage());
                    }
                }

                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ (–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç, Wildberries –∏ –¥—Ä.)
                if (url.contains("market.yandex") || url.contains("wildberries") || url.contains("ozon")) {
                    log.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–∂–∏–¥–∞–Ω–∏—è");
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
                    try {
                        // –î–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞ –≤–∞–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JavaScript –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
                        if (url.contains("market.yandex")) {
                            // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –∏–ª–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            page.waitForTimeout(timeoutMs / 5); // –í—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

                            // –ü—Ä–æ–±—É–µ–º –¥–æ–∂–¥–∞—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
                            try {
                                page.locator("h1").first().waitFor(new Locator.WaitForOptions().setTimeout(timeoutMs / 2));
                            } catch (Exception ex) {
                                log.debug("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
                            }
                        } else {
                            page.waitForTimeout(timeoutMs / 3); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JS
                            page.locator("body").first().waitFor(new Locator.WaitForOptions().setTimeout(timeoutMs / 2));
                        }

                        // –ï—â–µ –æ–¥–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                        page.waitForTimeout(timeoutMs / 5);
                    } catch (Exception e) {
                        log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –æ–∂–∏–¥–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞: {}", e.getMessage());
                    }
                }
                
                // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ JavaScript-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
                String currentUrl = page.url();
                int unchangedCount = 0;
                boolean urlChanged = false;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π URL –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                String baselineUrl = initialUrl;
                log.info("=== –ù–ê–ß–ê–õ–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø ===");
                log.info("–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π URL (baselineUrl): {}", baselineUrl);
                log.info("–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {}", currentUrl);
                log.info("URLs –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ? {}", currentUrl.equals(baselineUrl));

                // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                if (!currentUrl.equals(baselineUrl)) {
                    log.info("üéØ –†–ï–î–ò–†–ï–ö–¢ –û–ë–ù–ê–†–£–ñ–ï–ù –°–†–ê–ó–£ –ü–û–°–õ–ï –ù–ê–í–ò–ì–ê–¶–ò–ò: {} -> {}", baselineUrl, currentUrl);
                    finalUrl = currentUrl;
                    redirectCount = 1;
                    urlChanged = true;
                }

                // –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π URL –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
                int maxIterations = timeoutMs / 500; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–π–º–∞—É—Ç–∞
                for (int i = 0; i < maxIterations; i++) {
                    page.waitForTimeout(500); // –ñ–¥–µ–º 500–º—Å –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

                    String newUrl = page.url();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ
                    if (!newUrl.equals(currentUrl)) {
                        log.debug("URL –∏–∑–º–µ–Ω–∏–ª—Å—è: {} -> {}", currentUrl, newUrl);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–Ω–∞—á–∏–º—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ URL
                        if (!newUrl.equals(baselineUrl) && !urlChanged) {
                            redirectCount++;
                            finalUrl = newUrl;
                            urlChanged = true;
                            log.info("üéØ –†–ï–î–ò–†–ï–ö–¢ –ó–ê–§–ò–ö–°–ò–†–û–í–ê–ù –í –¶–ò–ö–õ–ï: {} -> {} (—Ä–µ–¥–∏—Ä–µ–∫—Ç #{})", baselineUrl, newUrl, redirectCount);
                        }

                        currentUrl = newUrl;
                        unchangedCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç–∏
                    } else {
                        unchangedCount++;
                        // –ï—Å–ª–∏ URL –Ω–µ –º–µ–Ω—è–ª—Å—è 12 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ (6 —Å–µ–∫—É–Ω–¥), —Å—á–∏—Ç–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π
                        if (unchangedCount >= 12) {
                            log.debug("URL —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ—Å–ª–µ {} –ø—Ä–æ–≤–µ—Ä–æ–∫", unchangedCount);
                            break;
                        }
                    }

                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if (i % 4 == 0) { // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                        try {
                            String pageTitle = page.title();
                            String currentCheck = page.url();

                            if (pageTitle != null && !pageTitle.isEmpty() &&
                                !pageTitle.equals("Loading...") && !pageTitle.contains("–ó–∞–≥—Ä—É–∑–∫–∞")) {

                                // –ï—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–≥–æ, —ç—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç
                                if (!currentCheck.equals(baselineUrl) && !urlChanged) {
                                    log.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {}", currentCheck);
                                    finalUrl = currentCheck;
                                    redirectCount = 1;
                                    urlChanged = true;
                                }

                                // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ URL —Å—Ç–∞–±–∏–ª–µ–Ω, –º–æ–∂–µ–º –∑–∞–≤–µ—Ä—à–∞—Ç—å
                                if (unchangedCount >= 6) {
                                    log.debug("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ");
                                    break;
                                }
                            }
                        } catch (Exception e) {
                            log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {}", e.getMessage());
                        }
                    }
                }

                // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ–∑–∞–º–µ—á–µ–Ω–æ
                String finalCheck = page.url();
                if (!finalCheck.equals(baselineUrl) && !urlChanged) {
                    log.info("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç {} -> {}", baselineUrl, finalCheck);
                    finalUrl = finalCheck;
                    redirectCount = 1;
                    urlChanged = true;
                }


                // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL, –µ—Å–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –Ω–µ –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω–µ–µ
                if (redirectCount == 0) {
                    String lastUrl = page.url();
                    if (!lastUrl.equals(initialUrl)) {
                        finalUrl = lastUrl;
                        redirectCount = 1;
                        log.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {} -> {}", initialUrl, lastUrl);
                    } else {
                        finalUrl = lastUrl;
                    }
                }
                
                // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é URL
                if (!initialUrl.equals(finalUrl) && redirectCount == 0) {
                    redirectCount = 1; // –ï—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ –º—ã –Ω–µ –æ—Ç—Å–ª–µ–¥–∏–ª–∏ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª
                    log.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç: {} -> {}", initialUrl, finalUrl);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å HTTP
                int finalStatusCode = response != null ? response.status() : 200;
                log.debug("–§–∏–Ω–∞–ª—å–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: {}", finalStatusCode);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª, –∏–Ω–∞—á–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
                int reportHttpCode = (initialRedirectCode.get() != null) ? initialRedirectCode.get() : finalStatusCode;
                
                // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                String pageContent = page.content();
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                if (isBlocked(pageContent)) {
                    log.warn("Playwright: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ URL: {}", finalUrl);
                    return RedirectResult.builder()
                            .originalUrl(originalUrl)
                            .finalUrl(finalUrl)
                            .redirectCount(redirectCount)
                            .status(PageStatus.BLOCKED)
                            .errorMessage("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞–Ω—Ç–∏–±–æ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
                            .startTime(startTime)
                            .endTime(System.currentTimeMillis())
                            .strategy(getStrategyName())
                            .build();
                }
                
                // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                PageStatus status;
                if (finalStatusCode >= 400) {
                    status = PageStatus.NOT_FOUND;
                } else if (redirectCount > 0) {
                    status = PageStatus.REDIRECT;
                } else {
                    status = PageStatus.OK;
                }
                
                log.info("Playwright: —É—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL: {} -> {} (—Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤: {}, HTTP: {})", 
                        originalUrl, finalUrl, redirectCount, reportHttpCode);
                
                return RedirectResult.builder()
                        .originalUrl(originalUrl)
                        .finalUrl(finalUrl)
                        .redirectCount(redirectCount)
                        .status(status)
                        .httpCode(reportHttpCode)  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTTP –∫–æ–¥
                        .errorMessage(null)
                        .startTime(startTime)
                        .endTime(System.currentTimeMillis())
                        .strategy(getStrategyName())
                        .build();
                        
            } catch (TimeoutError e) {
                log.warn("Playwright: —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {} ({}ms)", url, timeoutMs);
                return RedirectResult.builder()
                        .originalUrl(originalUrl)
                        .finalUrl(finalUrl)
                        .redirectCount(0)
                        .status(PageStatus.ERROR)
                        .errorMessage("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: " + timeoutMs + "ms")
                        .startTime(startTime)
                        .endTime(System.currentTimeMillis())
                        .strategy(getStrategyName())
                        .build();
            }
            
        } catch (PlaywrightException e) {
            log.error("Playwright: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {}", url, e);
            return RedirectResult.builder()
                    .originalUrl(originalUrl)
                    .finalUrl(url)
                    .redirectCount(0)
                    .status(PageStatus.ERROR)
                    .errorMessage("–û—à–∏–±–∫–∞ Playwright: " + e.getMessage())
                    .startTime(startTime)
                    .endTime(System.currentTimeMillis())
                    .strategy(getStrategyName())
                    .build();
        } catch (Exception e) {
            log.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ PlaywrightStrategy –¥–ª—è URL: {}", url, e);
            return RedirectResult.builder()
                    .originalUrl(originalUrl)
                    .finalUrl(url)
                    .redirectCount(0)
                    .status(PageStatus.ERROR)
                    .errorMessage("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage())
                    .startTime(startTime)
                    .endTime(System.currentTimeMillis())
                    .strategy(getStrategyName())
                    .build();
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
     */
    private boolean isBlocked(String content) {
        if (content == null || content.isEmpty()) {
            return false;
        }

        String lowerContent = content.toLowerCase();
        return BLOCK_KEYWORDS.stream()
                .anyMatch(lowerContent::contains);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL –∑–Ω–∞—á–∏–º—ã–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
     * (–Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞)
     */
    private boolean isSignificantUrlChange(String oldUrl, String newUrl) {
        if (oldUrl == null || newUrl == null) {
            return false;
        }

        try {
            // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π URL –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            String oldBase = oldUrl.split("\\?")[0];
            String newBase = newUrl.split("\\?")[0];

            // –£–¥–∞–ª—è–µ–º trailing slash –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            oldBase = oldBase.endsWith("/") ? oldBase.substring(0, oldBase.length() - 1) : oldBase;
            newBase = newBase.endsWith("/") ? newBase.substring(0, newBase.length() - 1) : newBase;

            // –ï—Å–ª–∏ –±–∞–∑–æ–≤—ã–µ —á–∞—Å—Ç–∏ —Ä–∞–∑–Ω—ã–µ - —ç—Ç–æ –∑–Ω–∞—á–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            if (!oldBase.equals(newBase)) {
                return true;
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤: –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (oldUrl.contains("market.yandex") || oldUrl.contains("wildberries") || oldUrl.contains("ozon")) {
                // –î–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞
                return !extractProductParams(oldUrl).equals(extractProductParams(newUrl));
            }

            return false;

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL: {}", e.getMessage());
            return !oldUrl.equals(newUrl); // Fallback - –ª—é–±–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏–º—ã–º
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
     */
    private String extractProductParams(String url) {
        if (url == null) return "";

        StringBuilder keyParams = new StringBuilder();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
        if (url.contains("market.yandex")) {
            if (url.contains("/product")) keyParams.append("product-");
            if (url.contains("sku=")) {
                String sku = extractParam(url, "sku");
                keyParams.append("sku:").append(sku).append("-");
            }
        } else if (url.contains("wildberries")) {
            if (url.contains("/catalog/")) {
                String[] parts = url.split("/catalog/");
                if (parts.length > 1) {
                    keyParams.append("catalog:").append(parts[1].split("/")[0]).append("-");
                }
            }
        }

        return keyParams.toString();
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ URL
     */
    private String extractParam(String url, String paramName) {
        try {
            String[] parts = url.split(paramName + "=");
            if (parts.length > 1) {
                return parts[1].split("&")[0];
            }
        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {}: {}", paramName, e.getMessage());
        }
        return "";
    }
    
    private RedirectResult buildErrorResult(String originalUrl, long startTime, String errorMessage) {
        long endTime = System.currentTimeMillis();
        log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL {}: {}", originalUrl, errorMessage);
        
        return RedirectResult.builder()
                .originalUrl(originalUrl)
                .finalUrl(originalUrl)
                .redirectCount(0)
                .status(PageStatus.ERROR)
                .errorMessage(errorMessage)
                .startTime(startTime)
                .endTime(endTime)
                .strategy(getStrategyName())
                .build();
    }
    
    @Override
    public boolean canHandle(String url, PageStatus previousStatus) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        return previousStatus == PageStatus.BLOCKED || 
               previousStatus == null || 
               previousStatus == PageStatus.OK ||
               previousStatus == PageStatus.ERROR;
    }
    
    @Override
    public int getPriority() {
        return 2; // –í—Ç–æ—Ä–∞—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –ø–æ—Å–ª–µ curl
    }
    
    @Override
    public String getStrategyName() {
        return "playwright";
    }
}