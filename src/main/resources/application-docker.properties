# =======================================================
# ПРОФИЛЬ DOCKER (docker)
# =======================================================
# Специальный профиль для запуска в Docker контейнере
# Оптимизирован для контейнерного окружения
# =======================================================

# JPA/Hibernate - оптимизация для Docker
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.hibernate.ddl-auto=validate

# Thymeleaf - включение кэширования
spring.thymeleaf.cache=true

# =======================================================
# DATABASE CONNECTION (используется из ENV переменных)
# =======================================================
# spring.datasource.url - задается через SPRING_DATASOURCE_URL в docker-compose.yml
# spring.datasource.username - задается через SPRING_DATASOURCE_USERNAME
# spring.datasource.password - задается через SPRING_DATASOURCE_PASSWORD

# Connection pool оптимизация для Docker
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.connection-test-query=SELECT 1

# =======================================================
# ЛОГИРОВАНИЕ ДЛЯ DOCKER
# =======================================================

# Уровни логирования - баланс между информативностью и производительностью
logging.level.org.springframework=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Логирование приложения
logging.level.com.java=INFO
logging.level.com.java.service.imports=INFO
logging.level.com.java.service.exports=INFO
logging.level.com.java.service.statistics=INFO
logging.level.com.java.service.utils=INFO
logging.level.com.java.controller=INFO

# Логирование в stdout (Docker logs)
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Дополнительно логирование в файл для постоянного хранения
logging.file.name=/app/logs/zoomos-v4.log
logging.file.max-size=100MB
logging.file.max-history=30

# =======================================================
# ПРОИЗВОДИТЕЛЬНОСТЬ И ОПТИМИЗАЦИЯ
# =======================================================

# Dashboard refresh
dashboard.auto-refresh.interval=60000
dashboard.stats.cache-duration=30000

# Batch processing
import.batch-size=1000
export.batch-size=2000

# Thread pools - оптимизация для контейнерного окружения
import.async.core-pool-size=2
import.async.max-pool-size=4
export.async.core-pool-size=2
export.async.max-pool-size=4

# Memory optimization
import.max-memory-percentage=70

# Hibernate batch processing
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# =======================================================
# FLYWAY MIGRATIONS
# =======================================================

# Flyway настройки для Docker
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=false
spring.flyway.clean-disabled=true
spring.flyway.clean-on-validation-error=false
spring.flyway.out-of-order=true

# =======================================================
# ФАЙЛОВАЯ СИСТЕМА В КОНТЕЙНЕРЕ
# =======================================================

# Пути внутри контейнера (соответствуют volumes в docker-compose.yml)
application.upload.dir=/app/data/upload
application.export.dir=/app/data/upload/exports
application.import.dir=/app/data/upload/imports
application.temp.dir=/app/data/temp

export.temp.dir=/app/data/temp/exports
export.result.dir=/app/data/upload/exports

# =======================================================
# БЕЗОПАСНОСТЬ И МОНИТОРИНГ
# =======================================================

# Spring Boot Actuator для health checks
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true

# Таймауты
import.timeout-minutes=120
server.servlet.session.timeout=1800s

# =======================================================
# СИСТЕМА ОБСЛУЖИВАНИЯ - DOCKER
# =======================================================

# Активация планировщика в Docker (можно включить для автообслуживания)
maintenance.scheduler.enabled=true

# Docker-оптимизированное расписание
# Архивирование файлов каждый день в 03:00
maintenance.scheduler.file-archive.cron=0 0 3 * * *

# Очистка БД каждое воскресенье в 04:00
maintenance.scheduler.database-cleanup.cron=0 0 4 * * SUN

# Проверка системы каждые 2 часа
maintenance.scheduler.health-check.cron=0 0 */2 * * *

# Анализ производительности каждый понедельник в 02:00
maintenance.scheduler.performance-analysis.cron=0 0 2 * * MON

# Полное обслуживание первого числа каждого месяца в 05:00
maintenance.scheduler.full-maintenance.cron=0 0 5 1 * *

# Уведомления
maintenance.notifications.enabled=true
maintenance.notifications.websocket.enabled=true

# =======================================================
# PLAYWRIGHT CONFIGURATION
# =======================================================

# Playwright для RedirectFinderService работает в headless режиме
# Браузеры установлены в Docker образе
