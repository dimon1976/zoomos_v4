 Привет! Как дела? Чем могу помочь с проектом?

> Давай порассуждаем. У меня есть задача придумать стратегию экспорта где при выгрузке в определенных полях будут
  нормализоваться значения и приводиться к одному значению. Например 0.7л и 0.7 или 0.7 л.  это все будет просто 0.7,
  также например и с брендами. Посмотри примеры как это выглядит в этом файле D:\project\zoomos_v4\example.csv

● Read(example.csv)
  ⎿  Read 49 lines (ctrl+r to expand)

● Отлично! Вижу примеры из файла. Действительно есть проблема с нормализацией данных:

  Объемы:
  - 0.7 �. (с точкой и л)
  - 0.7 (только цифра)
  - 0.7 � (с л без точки)
  - 0,7 �. (с запятой вместо точки)

  Бренды:
  - Macallan vs MACALLAN (разный регистр)
  - Macallan vs The Macallan vs The�Macallan (с артиклем и без)
  - Macallan vs Macallan, Edition №5 (основной бренд + дополнительные характеристики)

  Стратегия нормализации:

  1. Объемы:
    - Извлекать только числовое значение
    - Заменять запятые на точки
    - Убирать единицы измерения (л, мл и т.д.)
  2. Бренды:
    - Приводить к единому регистру
    - Убирать артикли (The, A, An)
    - Извлекать основной бренд до первой запятой
    - Убирать лишние пробелы и спецсимволы
	
	
	 Текущая архитектура экспорта:

  1. Strategy Pattern: ExportStrategy интерфейс с 3 реализациями:
    - DefaultExportStrategy (базовая обработка)
    - SimpleReportExportStrategy
    - TaskReportExportStrategy
  2. ExportStrategyFactory - фабрика для выбора стратегии
  3. Обработка данных: метод processData() получает данные и шаблон, возвращает обработанные данные

  Идея для системы нормализации:

● Концепция системы нормализации:

  1. Двухуровневая архитектура:

  Уровень 1: Field-level нормализация
  - В ExportTemplateField добавить поле normalizationRule
  - Каждое поле может иметь свои правила нормализации

  Уровень 2: Справочник нормализации
  - Отдельная сущность NormalizationDictionary с вариациями значений
  - Пример: 0.7л, 0.7 л., 0,7 л → 0.7

  2. Типы нормализации:

  enum NormalizationType {
      VOLUME,      // 0.7л → 0.7
      BRAND,       // Macallan, Edition №5 → Macallan
      CURRENCY,    // $100, 100USD → 100
      CUSTOM       // пользовательские правила
  }

  3. Интеграция в стратегии:

  - Расширить DefaultExportStrategy.formatValue()
  - Добавить вызов нормализатора перед форматированием
  - Можно включать/выключать для каждой стратегии

  4. Управление:

  - UI для настройки правил нормализации в шаблонах
  - Импорт/экспорт справочников нормализации
  - Предпросмотр результатов нормализации
  
  
   Пример 1: Расширение ExportTemplateField

  @Entity
  public class ExportTemplateField {
      // ... существующие поля

      @Enumerated(EnumType.STRING)
      private NormalizationType normalizationType;

      @Column(length = 500)
      private String normalizationRule;  // JSON с правилами
  }

  Пример normalizationRule:

  Для объемов (VOLUME):

  {
    "extractNumeric": true,
    "removeUnits": ["л", "л.", "мл", "ml"],
    "replaceCommaWithDot": true,
    "resultType": "DECIMAL"
  }

  Как работает:
  - "0.7л" → извлекает 0.7
  - "0,7 л." → заменяет , на . → убирает  л. → 0.7
  - "0.7" → остается 0.7

  Для брендов (BRAND):

  {
    "removeArticles": ["The", "A", "An"],
    "extractMainBrand": {
      "splitBy": ",",
      "takeFirst": true
    },
    "caseNormalization": "PROPER_CASE"
  }

  Как работает:
  - "The Macallan" → убирает The → Macallan
  - "Macallan, Edition №5" → берет часть до запятой → Macallan
  - "MACALLAN" → приводит к Macallan

  Для кастомных правил (CUSTOM):

  {
    "dictionary": [
      {"variants": ["0.7л", "0,7 л.", "0.7 л"], "canonical": "0.7"},
      {"variants": ["Macallan", "The Macallan", "MACALLAN"], "canonical": "Macallan"}
    ]
  }

  NormalizationType - определяет алгоритм:

  public enum NormalizationType {
      VOLUME,     // Использует VolumeNormalizer
      BRAND,      // Использует BrandNormalizer
      CURRENCY,   // Использует CurrencyNormalizer
      CUSTOM      // Использует DictionaryNormalizer
  }

  Как это интегрируется в код:

  // В DefaultExportStrategy
  private Object normalizeValue(Object value, ExportTemplateField field) {
      if (field.getNormalizationType() == null) {
          return value; // нет нормализации
      }

      NormalizationService normalizer = getNormalizer(field.getNormalizationType());
      return normalizer.normalize(value, field.getNormalizationRule());
  }

  Интерфейс настройки в UI:

  Поле: Объем
  ┌─ Нормализация: ☑ Включена
  │  Тип: [VOLUME ▼]
  │  ☑ Извлекать только числа
  │  ☑ Убирать единицы измерения
  │  ☑ Заменять запятую на точку
  └─ Предпросмотр: "0,7л" → "0.7"


Функционал нормализации полностью работает:

  1. ✅ UI для настройки нормализации - реализован с:
    - Кнопками "Нормализация" для каждого поля экспорта
    - Раскрывающимися панелями с настройками
    - Выпадающим списком выбора типа нормализации
    - Полем для настройки правил нормализации (JSON)
    - Предварительным просмотром примеров
  2. ✅ Интерфейс выбора типа нормализации - включает:
    - Объемы (VOLUME): "0.7л → 0.7"
    - Бренды (BRAND): "The Macallan → Macallan"
    - Валюты (CURRENCY): "$100 → 100"
    - Пользовательские (CUSTOM)
  3. ✅ Быстрая настройка - кнопки "Объемы", "Бренды", "Сбросить" работают корректно
  4. ✅ API тестирование - REST endpoint /api/normalization/test успешно обрабатывает запросы:
    - Вход: "The Macallan, Edition №5"
    - Выход: "Macallan"
    - Корректно удаляет артикли, лишние символы и нормализует бренды
  5. ✅ Интеграция с бэкендом - система нормализации интегрирована с:
    - DefaultExportStrategy для применения во время экспорта
    - NormalizationService с поддержкой разных типов нормализаторов
    - Базой данных через миграцию V14

  Система готова к использованию для нормализации данных при экспорте!